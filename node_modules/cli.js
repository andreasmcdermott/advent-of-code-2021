const fs = require("fs");
const path = require("path");
const ps = require("child_process");

const FILES = [
  [
    "index.js",
    `const { input, print } = require('utils');
  
const mapLine = line => line;

const VALUES = input(mapLine);
const copyLines = (lines) => [...lines.map(line => [...line])];

function part1(lines) {
  return lines;
}

function part2(lines) {
  return [];
}

const resultPart1 = part1(copyLines(VALUES));
const resultPart2 = part2(copyLines(VALUES));

print(resultPart1, resultPart2);`,
  ],
  ["input.txt", ""],
];

const debounce = (fn, ms) => {
  let timeoutId = null;
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => fn(...args), ms);
  };
};

const getDayPath = (day) => path.resolve(process.cwd(), `day${day}`);

const handleOptions = (options) => {
  const modifiers = options.filter(o => o.startsWith('--'));
  const days = options.filter(o => /^\d+$/.test(o));

  const today = new Date().getDate();
  if (!days) days = [];
  if (!days.length) days.push(today);
  if (days.length === 1 && days[0] === "all") {
    days.pop();
    for (let day = 1; day <= today; ++day) {
      days.push(String(day));
    }
  }
  return { days, modifiers };
};

const createDay = (day) => {
  const fullPath = getDayPath(day);
  fs.mkdirSync(fullPath);
  FILES.forEach(([file, content]) => {
    fs.writeFileSync(path.resolve(fullPath, file), content, "utf8");
  });
};

const runDay = (day) => {
  console.log(getDayPath(day));
  if (fs.existsSync(getDayPath(day))) {
    console.log(`Day ${day}:\n`);
    try {
    ps.execSync(`node ./day${day}`, { stdio: "inherit" });
    } catch {}
    console.log("");
  } else {
    console.log(`Day ${day}:\n\nUnavailable\n`);
  }
};

const add = ({ days, modifiers }) => {
  days.forEach((day) => {
    const fullPath = getDayPath(day);;
    if (fs.existsSync(fullPath)) {
      console.log(`Day ${day} already exist. Will not overwrite!`);
    } else {
      createDay(day);
    }
  });

  if (days.length === 1 && modifiers.includes('--start')) {
    run({ days });
  }
};

const run = ({ days }) => {
  if (days.length === 1) {
    const day = days[0];
    const debouncedRun = debounce(runDay.bind(null, day), 500);
    runDay(day);
    fs.watch(getDayPath(day), debouncedRun);
  } else {
    days.forEach(runDay);
  }
};

const commands = {
  add,
  run,
};

const start = ([, , cmd, ...options]) => {
  if (!cmd) cmd = 'run';
  if (commands[cmd]) {
    commands[cmd](handleOptions(options));
  } else {
    console.log(
      `Command "${cmd}" is not valid. Valid commands: ${Object.keys(
        commands
      ).join(", ")}`
    );
  }
};

module.exports = { start };
